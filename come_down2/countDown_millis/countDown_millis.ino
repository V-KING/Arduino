/*==================================================
 *     Name: come_down2_addBeep.ino
 *  Version: 1.0 - 2014/5/10 16:21:17
 *  Company: WWW.SOGWORKS.CN
 * Function:	从9-0的倒计时器 ，当时到了，就蜂鸣，蜂鸣时间5s。
 * 	在此期间：
 * 	若时间还在跑，按了key就停止倒计时.
 * 	若已经时间停止跑了，按key就是重新开启倒计时.
 ==================================================*/



/* 
 *数码管引脚号:(3462BS这一面对着你)
 *数码管上排：12 - 6
 *数码管下排：1  - 6 
 *
 * 数码管引脚号对应的 led段：
 * 数码管引脚 - arduino引脚
 * A-11            7
 * B-7             6
 * C-4             5
 * D-2             10
 * E-1             11
 * F-10            8
 * G-5             9
 * DP-3            4
 * DIG1-12         13
 * DIG2-9          12
 * DIG3-8          3 
 * DIG4-6          2 
 * */


//设置控制各段的数字IO 脚
int a=7;			//定义数字接口7 连接a 段数码管
int b=6;			// 定义数字接口6 连接b 段数码管
int c=5;			// 定义数字接口5 连接c 段数码管
int d=10;			// 定义数字接口10 连接d 段数码管
int e=11;			// 定义数字接口11 连接e 段数码管
int f=8;			// 定义数字接口8 连接f 段数码管
int g=9;			// 定义数字接口9 连接g 段数码管
int dp=4;			// 定义数字接口4 连接dp 段数码管
int bitn[4]={
    13,12,3,2};		//有四个数码管，从左到右它们的共阴极引脚分别接arduino的13,12,3,2引脚
/* 
 * 我们用的3462BS是共阳极的所以应该是,之前用的是共阴极的数码管
 * 所以可以只需要改动下面一行代码就可以了
 * 二极管正极--->
 *
 */
int high=HIGH;					  //共阴极时high=HIGH；
int low=LOW;					  //共阳极时low=LOW;
int buttonPP = A0;				  //play OR pause 按键
/* **时间用到的变量** */
int shi1=0;                       //小时的第一个数
int shi2=0;                       //小时的第二个数
int fen1=0;                       //小时的第一个数
int fen2=0;                       //小时的第二个数
/* **定时器用到的变量** */
byte miao=9;          		  //秒
byte fen=0;	          		  //分
byte shi=12;           		  //时

static unsigned long previouTotalBeepTime;	//用来计算是否到了beeping的时间,到了就不响了


void digital_0(void)              //显示数字0
{
    unsigned char j;
    digitalWrite(a,high);
    digitalWrite(b,high);
    digitalWrite(c,high);
    digitalWrite(d,high);
    digitalWrite(e,high);
    digitalWrite(f,high);

    digitalWrite(g,low);
}
//显示数字1
void digital_1(void)             
{
    unsigned char j;
    digitalWrite(c,high);			//给数字接口5 引脚高电平，点亮c 段
    digitalWrite(b,high);			//点亮b 段
    for(j=7;j<=11;j++)			//熄灭其余段
	digitalWrite(j,low);
    digitalWrite(dp,low);			//熄灭小数点DP 段
}
//显示数字2
void digital_2(void) 			
{
    unsigned char j;
    digitalWrite(b,high);
    digitalWrite(a,high);
    for(j=9;j<=11;j++)
	digitalWrite(j,high);
    digitalWrite(dp,low);
    digitalWrite(c,low);
    digitalWrite(f,low);
}
//显示数字3
void digital_3(void) 			
{
    unsigned char j;
    digitalWrite(g,high);
    digitalWrite(d,high);
    for(j=5;j<=7;j++)
	digitalWrite(j,high);
    digitalWrite(dp,low);
    digitalWrite(f,low);
    digitalWrite(e,low);
}
//显示数字4
void digital_4(void) 
{
    digitalWrite(c,high);
    digitalWrite(b,high);
    digitalWrite(f,high);
    digitalWrite(g,high);
    digitalWrite(dp,low);
    digitalWrite(a,low);
    digitalWrite(e,low);
    digitalWrite(d,low);
}
//显示数字5
void digital_5(void) 
{
    unsigned char j;
    for(j=7;j<=9;j++)
	digitalWrite(j,high);
    digitalWrite(c,high);
    digitalWrite(d,high);
    digitalWrite(dp,low);
    digitalWrite(b,low);
    digitalWrite(e,low);
}
//显示数字6
void digital_6(void) 
{
    unsigned char j;
    for(j=7;j<=11;j++)
	digitalWrite(j,high);
    digitalWrite(c,high);
    digitalWrite(dp,low);
    digitalWrite(b,low);
}
//显示数字7
void digital_7(void) 
{
    unsigned char j;
    for(j=5;j<=7;j++)
	digitalWrite(j,high);
    digitalWrite(dp,low);
    for(j=8;j<=11;j++)
	digitalWrite(j,low);
}
//显示数字8
void digital_8(void) 
{
    unsigned char j;
    for(j=5;j<=11;j++)
	digitalWrite(j,high);
    digitalWrite(dp,low);
}
//显示数字9
void digital_9(void) 
{
    unsigned char j;
    for(j=5;j<=11;j++)
	digitalWrite(j,high);
    digitalWrite(dp,low);
    digitalWrite(e,low);
}
/*
 *当lightUp_flag=1时，就是显示两个点 
 *当lightUp_flag=0时，就是不显示两个点 
 */
void dock(int lightUp_flag) 
{
    unsigned char j;
    for(j=5;j<=11;j++)
	digitalWrite(j,low);
    if(lightUp_flag==1){
	digitalWrite(dp,high);	//点亮dp段
    }
    else{
	digitalWrite(dp,low);	//灭dp段
    }
}
/*
 * 将数码管全部灭了
 */
void clearLED()
{
    digitalWrite(a,low);
    digitalWrite(b,low);
    digitalWrite(c,low);
    digitalWrite(d,low);
    digitalWrite(e,low);
    digitalWrite(f,low);
    digitalWrite(g,low);
    digitalWrite(dp,low);
    //位控制
    digitalWrite(13,high);
    digitalWrite(12,high);
    digitalWrite(3,high);
    digitalWrite(2,high);
}
/* 
 * 显示数字data
 * */
void disp(int data)
{
    clearLED();			//先灭一遍，选择好了是哪个后，在点亮第n个数码管
    switch(data)
    {
	case 0:
	    digital_0();
	    break;
	case 1:
	    digital_1();
	    break;
	case 2:
	    digital_2();
	    break;
	case 3:
	    digital_3();
	    break;
	case 4:
	    digital_4();
	    break;
	case 5:
	    digital_5();
	    break;
	case 6:
	    digital_6();
	    break;
	case 7:
	    digital_7();
	    break;
	case 8:
	    digital_8();
	    break;
	case 9:
	    digital_9();
	    break;
	default:
	    break;  
    }
}

/* 
 * 参数：button接到按键的引脚号
 * 返回：按键状态。
 * 返回的按键的状态有：UNPRESSED,PRESS_MOMENT,PRESS_ALLWAYS,RELEASE_MOMENT;
 * */
int UNPRESSED= 1;
int PRESSED= 0;
int PRESS_MOMENT=111;
int PRESS_ALLWAYS=222;
int RELEASE=333;
int priorButtonState = UNPRESSED;
int buttonAction(int button){
    int state;
    if(digitalRead(button)==PRESSED){//本次按下
	if(priorButtonState==UNPRESSED){
	    state = PRESS_MOMENT;		//按下的一瞬间
	}
	else{
	    state = PRESS_ALLWAYS;		//一直按着
	}
	priorButtonState = PRESSED;		//赋值
    }
    else {//本次没有按下
	if(priorButtonState == PRESSED){
	    state = RELEASE;			//释放瞬间
	}
	else{
	    state = UNPRESSED;			//根本没按
	}
	priorButtonState = UNPRESSED;	//赋值
    }
    return state;
}
/* 
 * 蜂鸣器响5s钟
 * */
void beeping(){
    static unsigned long previouBeepMoment1=millis();		//用来计算每个音调响多久用的
    if(millis()-previouTotalBeepTime< 5000){				//也就是大与5000时就不响了,不执行下面了
	if(millis() - previouBeepMoment1 <= 500){			//不到500ms就响750HZ 的频率
	    noTone(3);
	    tone(3,750,500);
	}
	else if(millis() - previouBeepMoment1 <= 1000){		//(500,1000)之间响1000HZ 频率
	    noTone(3);
	    tone(3,1000,500);
	}
	else{
	    previouBeepMoment1 = millis();					//beeping完5s后，更新previouTotalBeepTime
	}
    }
}

/* *** */
boolean stopFlag=0;											//停止时间跑的flag
int stateButtonAction=UNPRESSED;
unsigned long setTime;
unsigned long preS;				//用来记录每秒刷新1次的
unsigned long passms;				//从开机起总共过去了多少ms
unsigned long nows;				//从00:00:00起总共过去了多少ms,这个是正真的时间
unsigned long dispshi=0,dispfen=0,dispmiao=0;	//要显示的时分秒
unsigned long startms=0;	 		//记录计时前的时间（ms）
void setup()
{
    Serial.begin(9600);  
    //设置4～11 引脚为输出模式
    for(int i=2;i<=13;i++)
	pinMode(i,OUTPUT);
    //AO引脚为输入，上拉
    digitalWrite(A0,HIGH);
    setTime = 9000;						//设置开始的时间ms
}

void loop()
{
    //按键
    if(buttonAction(A0)==PRESS_MOMENT){
	stopFlag=~stopFlag;
    }
    //显示停止之前的时间
    if(stopFlag){
	//dispmiao=0;   
	passms=millis()-startms;
	setTime = passms+9000;			//重新计时，也就是在过去的时间上加上10s
	Serial.println(6);
    }
    else{
	//每过一秒就刷新一次要显示的时间
	static unsigned long startms=millis();	 		//记录计时前的时间（ms）
	if(millis()- preS>=1000){
	    preS=millis();
	    passms=millis()-startms;
	    //从进入循环到现在总共过了nows秒时间
	    nows=setTime/1000-passms/1000;
	    //计算要显示的时间
	    dispmiao=nows%10;   
	    //在串口显示时间
	    Serial.println(dispmiao,DEC); 

	    if(dispmiao == 0){//
		previouTotalBeepTime=millis(); 	
		while((stateButtonAction=buttonAction(A0))!=PRESS_MOMENT){
		    disp(0);
		    //响5s钟
		    beeping();	
		}
	    } 
	}

    }


    //数码管显示
    disp(dispmiao);
    //delay(100);

/************

    //倒计时到了，就去关闭时间更新,显示0，并且蜂鸣器叫
    if(miao<=0)		    
    {
	miao=9;
	NotUpdataTime();
	previouTotalBeepTime=millis(); 	
	//不断的烧苗键盘，显示，beeping
	while((stateButtonAction=buttonAction(A0))!=PRESS_MOMENT){
	    disp(0);
	    //响5s钟
	    beeping();	
	}
	//必须将previouTotalBeepTime更新,不然过了5000ms之后,永远都不会响了
	if( stateButtonAction == PRESS_MOMENT ){
	    previouTotalBeepTime=millis(); 	
	    updateTime();
	}
    }
    disp(miao);
    //<<这里还必须要延时一下，不然显示不正常，不知道为什么？>>
    delay(1);
**************/
}

